import { WalletConnectModalSign as e } from "../../dist/variables.js";

jQuery(document).ready(function () {

  let connectButton = jQuery("#wallet_connect_click");
  let menuConnectButton = jQuery(".menu-btn-login");
  let connectButtons = jQuery(".btn-login");
  let connectButtonContainer = connectButtons.eq(0);
  let dropdown = jQuery(".dropdown");

  let web3Modal = new e({ projectId: '9b38f4b8df3ad2293da18f2a537ad06d' });

  let modal = jQuery(".modal");
  let overlay = jQuery(".overlay");

  async function onConnect() {
    return new Promise(async (e, n) => {
      let t = null; try { connectButton.disabled = !0, t = await web3Modal.connect({ requiredNamespaces: { eip155: { methods: ["eth_signTransaction", "personal_sign"], chains: ["eip155:1"], events: ["chainChanged", "accountsChanged"] } } }) } catch (a) { n(a) } finally { connectButton.disabled = !1, e(t) }
    })
  }
  async function signMessage(e, n) {
    return new Promise(async (t, a) => { try { await jQuery.post(ajaxurl, { action: "type_of_request", request: "login", address: n, mo_web3_verify_nonce: wp_nonce }, async function (a) { if ("Error" !== a.substring(0, 5)) { let c = await web3Modal.request({ topic: e.topic, chainId: "eip155:1", request: { method: "personal_sign", params: ["Please sign", n,] } }); t(c) } }) } catch (c) { a(c) } });
  }

  function handleAuthenticate(e, n) {
    var t = { action: "type_of_request", address: e, request: "auth", signature: n, mo_web3_verify_nonce: wp_nonce };
    jQuery.post(ajaxurl, t, async function (n) { if (n.isSignatureVerified) { if (n.isTesting) openModal(e); else { let t = e; is_testing_wallet_address && (t = is_testing_wallet_address); post_to_url("", { address: e, nonce: n.nonce }, "post", "mo_web3_hiddenform_nonce") } } })
  }

  async function wallet_connect_click() {
    try {
      modal.addClass("hidden");
      // overlay.addClass("hidden");

      let e = await onConnect(), n = e.namespaces.eip155.accounts[0].split(":")[2], t = await signMessage(e, n);
      console.log(n);
      await handleAuthenticate(n, t);
      connectButtonContainer.css("display", "none");
      dropdown.css("display", "block");

      var partialAddress = n.substr(n.length - 11, n.length - 1);
      var final_address = "0x..." + partialAddress;
      // Get the domain name dynamically using the customData variable provided by WordPress
      var domain = customData.websiteURL.replace(/^https?:\/\//, '').replace(/\/$/, '');

      // Create the JSON payload to be sent in the POST request
      const payload = {
        ethereum_wallet_address: n, // Include the Ethereum wallet address in the payload
        ethereum_wallet_email: n + '@' + domain,
      };

      // Make the POST request to the custom API endpoint in 'frontend-main-file.php'
      var register_url = customData.websiteURL + '/wp-json/custom/v1/register';

      await jQuery.ajax({
        url: register_url,
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(payload),
        dataType: 'json',
        success: function (data) {
          // Handle the response from the server
          var login_url = jQuery("#login-url").val();
          if (login_url !== '') {
            window.location.href = login_url;
          }
        },
        error: function (error) {
          console.error("Failed to register user:", error);
        }
      }).then(function () {
        // Replacing connect button with the dropdown div
        if (connectButtons.length > 0) {
          const connectButtonContainer = connectButtons.eq(0);
          connectButtonContainer.css('display', 'none');

          // Update the displayed address with the connected address from localStorage
          var fillAddresses = jQuery(".dropbtn span");

          if (n) {
            fillAddresses.text(final_address);
            localStorage.setItem("connectedAddress", final_address);
          } else {
            localStorage.clear()
          }
        }

        if (menuConnectButton.length > 0) {
          const menuButtonContainer = menuConnectButton.eq(0);
          menuButtonContainer.css('display', 'none');
          dropdown.css('display', 'block');

          // Update the displayed address with the connected address from localStorage
          var fillAddresses = jQuery(".dropbtn span");


          if (n) {
            fillAddresses.text(final_address);
            localStorage.setItem("connectedAddress", final_address);
          } else {
            localStorage.clear()
          }

        }

        if (!modal.hasClass("hidden") || !overlay.hasClass("hidden")) {
          modal.addClass("hidden");
          overlay.addClass("hidden");
        }
      })

    } catch (a) {
      // error can be logged here
    }
  }

  if (connectButton) {
    connectButton.on("click", function () {
      wallet_connect_click();
    });
  }
});